################################################################################
# Base image
################################################################################

FROM balenalib/%%BALENA_MACHINE_NAME%%-debian as base

ENV INITSYSTEM=on
ENV DEBIAN_FRONTEND=noninteractive

################################################################################
# Rust image
################################################################################

FROM base as rust

# Install build tools
RUN apt-get -q update && apt-get install -yq --no-install-recommends libssl-dev pkg-config build-essential curl file strace

ENV PATH=/root/.cargo/bin:$PATH

WORKDIR /build

# TODO armv6
#
# This s the same binary built in my QEMU armv6
COPY qemu/qemu-hello-armv6l-debug ./
RUN file ./qemu-hello-armv6l-debug
RUN strace ./qemu-hello-armv6l-debug https://static.rust-lang.org/dist/channel-rust-1.34.0.toml.sha256

COPY qemu/qemu-hello-armv6l-release ./
RUN file ./qemu-hello-armv6l-release
RUN strace ./qemu-hello-armv6l-release https://static.rust-lang.org/dist/channel-rust-1.34.0.toml.sha256

# TODO armv6
#
# This "fixes" the Rust installer download issue on armv6 builders. If you comment out
# the following line, curl rustup.rs ... command will fail, because of network timeout.
# I tracked this down to the Reqwest package. Thus, keep this line here to able to
# install Rust.
#
# It's not proper fix, because there's something fishy. It just allows you to install
# Rust.
ENV RUSTUP_USE_CURL=1

# Install rustup downloading the version specified by the standard rust-toolchain file
COPY rust-toolchain .
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain `cat rust-toolchain`

#RUN rustup toolchain list
#RUN uname -a

################################################################################
# Dependencies
################################################################################

FROM rust as dependencies

WORKDIR /build

# Create new fake project ($USER is needed by `cargo new`)
RUN USER=root cargo new app

WORKDIR /build/app

# Copy real app dependencies
COPY Cargo.* ./
# Copy the file specifying the Rust version to use
COPY rust-toolchain ./

# Build fake project with real dependencies
RUN cargo build --release

# Remove the fake app build artifacts
RUN rm -rf target/release/hello* target/release/deps/hello-*

################################################################################
# Builder
################################################################################

FROM rust as builder

# We do not want to download deps, update registry, ... again
COPY --from=dependencies /root/.cargo /root/.cargo

WORKDIR /build/app

# Copy everything, not just source code
COPY . .

# Update already built deps from dependencies image
COPY --from=dependencies /build/app/target target

# Build real app
RUN cargo build --release

################################################################################
# Final image
################################################################################

FROM base

WORKDIR /app

# Copy binary from builder image
COPY --from=builder /build/app/target/release/hello .

# TODO armv6
#
# This simulates rustup installer. Hello world uses the first argument as an url
# and tries to GET it via Reqwest (= what Rust installer does).
#
# And ... it freezes the builder. I mean, it prints Still working... message,
# but there's no timeout, nothing, it just prints them till you kill the build
# process (git push).
RUN apt-get -q update && apt-get install -yq --no-install-recommends curl file
RUN file ./hello
RUN ./hello https://static.rust-lang.org/dist/channel-rust-1.34.0.toml.sha256

# Copy other folders required by the application. Example:
# COPY --from=builder /build/app/assets assets

# Launch application
CMD ["./hello", "%%BALENA_MACHINE_NAME%%"]
